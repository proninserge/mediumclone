import React from 'react'
import axios from 'axios'
import useLocalStorage from './useLocalStorage'

export default (url) => {
  const baseUrl = 'https://conduit.productionready.io/api'
  const [isLoading, setIsLoading] = React.useState(false)
  const [response, setResponse] = React.useState(null)
  const [error, setError] = React.useState(null)
  const [options, setOptions] = React.useState({})
  const [token] = useLocalStorage('token')

  const doFetch = React.useCallback((options = {}) => {
    setOptions(options)
    setIsLoading(true)
  }, [])

  React.useEffect(() => {
    let skipGetResponseAfterDestroy = false

    const requestOptions = {
      ...options,
      ...{
        headers: {
          authorization: token ? `Token ${token}` : '',
        },
      },
    }

    if (!isLoading) {
      return
    }

    axios(baseUrl + url, requestOptions)
      .then((res) => {
        if (!skipGetResponseAfterDestroy) {
          setIsLoading(false)
          setResponse(res.data)
        }
      })
      .catch((error) => {
        if (!skipGetResponseAfterDestroy) {
          setIsLoading(false)
          setError(error.response.data)
        }
      })

    return () => {
      // when component is dismounting this callback is initiated, removeEventListeners also here
      skipGetResponseAfterDestroy = true
    }
  }, [isLoading, options, url, token])

  return [{ response, isLoading, error }, doFetch]
}
