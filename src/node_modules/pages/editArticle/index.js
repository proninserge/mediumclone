import React from 'react'
import ArticleForm from 'components/articleForm'
import useFetch from 'hooks/useFetch'
import { Navigate } from 'react-router-dom'
import { useLocation } from 'react-router-dom'
import { CurrentUserContext } from 'contexts/currentUser'

const EditArticle = () => {
  const [currentUserState] = React.useContext(CurrentUserContext)

  const slug = useLocation()
    .pathname.replace('/articles/', '')
    .replace('/edit', '')
  const apiUrl = `/articles/${slug}`
  const [{ response: fetchArticleResponse }, doFetchArticle] = useFetch(apiUrl)
  const [
    { response: updateArticleResponse, error: updateArticleError },
    doUpdateArticle,
  ] = useFetch(apiUrl)
  const [initialValues, setInitialValues] = React.useState(null)
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = React.useState(false)

  const handleSubmit = (article) => {
    doUpdateArticle({
      method: 'put',
      data: {
        article,
      },
    })
  }

  React.useEffect(() => {
    doFetchArticle()
  }, [doFetchArticle])

  React.useEffect(() => {
    if (!fetchArticleResponse) {
      return
    }
    setInitialValues({
      title: fetchArticleResponse.article.title,
      description: fetchArticleResponse.article.description,
      body: fetchArticleResponse.article.body,
      tagList: fetchArticleResponse.article.tagList,
    })
  }, [fetchArticleResponse])

  React.useEffect(() => {
    if (!updateArticleResponse) {
      return
    }
    setIsSuccessfullSubmit(true)
  }, [updateArticleResponse])

  if (isSuccessfullSubmit) {
    return <Navigate to={`/articles/${updateArticleResponse.article.slug}`} />
  }

  if (currentUserState.isLoggedIn === false) {
    return <Navigate to="/" />
  }

  return (
    <ArticleForm
      onSubmit={handleSubmit}
      errors={(updateArticleError && updateArticleError.errors) || {}}
      initialValues={initialValues}
    />
  )
}

export default EditArticle
